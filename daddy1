--------------------------
-- Services & Variables
--------------------------
local TweenService = game:GetService("TweenService")
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local hrp = character:WaitForChild("HumanoidRootPart")

-- CONFIG: Chance for a lucky bonus (applies to pet/egg/seed spawns)
local LUCKY_CHANCE_PERCENT = 10
local function isLucky()
    return math.random(1,100) <= LUCKY_CHANCE_PERCENT
end

--------------------------
-- Lucky Harvest Function
--------------------------
-- This function “does” the lucky harvest by animating a bonus Candy Blossom.
local function doLuckyHarvest()
    local spawnPos = hrp.Position + Vector3.new(0, 5, 0)
    -- Create a tiny neon ball that will grow into a Candy Blossom.
    local blossom = Instance.new("Part")
    blossom.Name = "CandyBlossom"
    blossom.Size = Vector3.new(0.1, 0.1, 0.1)
    blossom.Shape = Enum.PartType.Ball
    blossom.Material = Enum.Material.Neon
    blossom.Color = Color3.fromRGB(255, 105, 180)  -- Hot pink hue
    blossom.Anchored = true
    blossom.CFrame = CFrame.new(spawnPos)
    blossom.Parent = workspace

    -- Tween settings to animate the blossom growing
    local tweenInfo = TweenInfo.new(1.5, Enum.EasingStyle.Elastic, Enum.EasingDirection.Out)
    local goalProperties = {
         Size = Vector3.new(5,5,5),
         CFrame = CFrame.new(spawnPos)
    }
    local tween = TweenService:Create(blossom, tweenInfo, goalProperties)
    tween:Play()
    tween.Completed:Connect(function(playbackState)
         if playbackState == Enum.PlaybackState.Completed then
              print("Lucky Harvest complete!")
              wait(3)  -- keep the bonus visible a few seconds before cleanup
              blossom:Destroy()
         end
    end)
end

--------------------------
-- Utility: Spawn Position
--------------------------
local function getSpawnPosition()
    return hrp.Position + Vector3.new(0,5,0)
end

--------------------------
-- GUI Setup
--------------------------
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "SpawnerGui"
screenGui.Parent = player:WaitForChild("PlayerGui")
screenGui.ResetOnSpawn = false

local mainFrame = Instance.new("Frame")
mainFrame.Size = UDim2.new(0,500,0,700)
mainFrame.Position = UDim2.new(0.5, -250, 0.5, -350)
mainFrame.BackgroundColor3 = Color3.fromRGB(30,30,30)
mainFrame.Parent = screenGui

local layout = Instance.new("UIListLayout", mainFrame)
layout.FillDirection = Enum.FillDirection.Vertical
layout.Padding = UDim.new(0,10)
layout.HorizontalAlignment = Enum.HorizontalAlignment.Center

-- Helper: create a header label.
local function createHeader(text)
   local header = Instance.new("TextLabel")
   header.Size = UDim2.new(1,-20,0,40)
   header.BackgroundTransparency = 1
   header.Text = text
   header.Font = Enum.Font.GothamBold
   header.TextSize = 24
   header.TextColor3 = Color3.new(1,1,1)
   header.Parent = mainFrame
end

-- Helper: create a labeled input field.
local function createInput(labelText)
   local container = Instance.new("Frame")
   container.Size = UDim2.new(1,-20,0,30)
   container.BackgroundTransparency = 1
   container.Parent = mainFrame

   local label = Instance.new("TextLabel")
   label.Size = UDim2.new(0,120,1,0)
   label.BackgroundTransparency = 1
   label.Text = labelText
   label.Font = Enum.Font.Gotham
   label.TextSize = 20
   label.TextColor3 = Color3.new(1,1,1)
   label.Parent = container

   local inputBox = Instance.new("TextBox")
   inputBox.Size = UDim2.new(0,200,1,0)
   inputBox.Position = UDim2.new(0,130,0,0)
   inputBox.Font = Enum.Font.Gotham
   inputBox.TextSize = 20
   inputBox.TextColor3 = Color3.new(0,0,0)
   inputBox.BackgroundColor3 = Color3.fromRGB(220,220,220)
   inputBox.Parent = container

   return inputBox
end

-- Helper: create a button.
local function createButton(text)
   local button = Instance.new("TextButton")
   button.Size = UDim2.new(1,-20,0,40)
   button.BackgroundColor3 = Color3.fromRGB(70,70,70)
   button.Text = text
   button.Font = Enum.Font.GothamBold
   button.TextSize = 22
   button.TextColor3 = Color3.new(1,1,1)
   button.Parent = mainFrame
   return button
end

--------------------------
-- Pet Spawner Section
--------------------------
createHeader("Pet Spawner")
local petNameBox = createInput("Pet Name:")
local petWeightBox = createInput("Weight (Kg):")
local petAgeBox = createInput("Age:")
local petSpawnButton = createButton("Spawn Pet")

petSpawnButton.MouseButton1Click:Connect(function()
    local petName = petNameBox.Text
    local petWeight = tonumber(petWeightBox.Text) or 0
    local petAge = tonumber(petAgeBox.Text) or 0
    local petRegistry = ReplicatedStorage:FindFirstChild("petregistry")
    local spawned = false
    if petRegistry then
         local petStates = petRegistry:FindFirstChild("petstatesregistry")
         if petStates and #petStates:GetChildren() > 0 then
              local petModels = petStates:GetChildren()
              local chosenPet = petModels[math.random(1,#petModels)]
              local petClone = chosenPet:Clone()
              if petName ~= "" then
                   petClone.Name = petName
              end
              petClone:SetAttribute("Weight", petWeight)
              petClone:SetAttribute("Age", petAge)
              petClone.Parent = workspace
              local spawnPos = getSpawnPosition()
              if petClone:IsA("Model") then
                  if petClone.PrimaryPart then
                      petClone:SetPrimaryPartCFrame(CFrame.new(spawnPos))
                  else
                      petClone:MoveTo(spawnPos)
                  end
              elseif petClone:IsA("BasePart") then
                  petClone.Position = spawnPos
              end
              spawned = true
              print("Pet spawned: " .. petClone.Name)
         else
              warn("No pet models available in petstatesregistry")
         end
    else
         warn("petregistry not found in ReplicatedStorage")
    end
    if spawned and isLucky() then
         doLuckyHarvest()
    end
end)

--------------------------
-- Egg Spawner Section
--------------------------
createHeader("Egg Spawner")
local eggNameBox = createInput("Egg Name:")
local eggSpawnButton = createButton("Spawn Egg")

eggSpawnButton.MouseButton1Click:Connect(function()
    local eggName = eggNameBox.Text
    local petEggShop = ReplicatedStorage:FindFirstChild("petEggShop")
    local spawned = false
    if petEggShop then
         local eggModelsFolder = petEggShop:FindFirstChild("Peteggs")
         if eggModelsFolder and #eggModelsFolder:GetChildren() > 0 then
              local eggModels = eggModelsFolder:GetChildren()
              local chosenEgg = eggModels[math.random(1,#eggModels)]
              local eggClone = chosenEgg:Clone()
              if eggName ~= "" then
                   eggClone.Name = eggName
              end
              eggClone.Parent = workspace
              local spawnPos = getSpawnPosition()
              if eggClone:IsA("Model") then
                   if eggClone.PrimaryPart then
                        eggClone:SetPrimaryPartCFrame(CFrame.new(spawnPos))
                   else
                        eggClone:MoveTo(spawnPos)
                   end
              elseif eggClone:IsA("BasePart") then
                   eggClone.Position = spawnPos
              end
              spawned = true
              print("Egg spawned: " .. eggClone.Name)
         else
              warn("No egg models available in Peteggs")
         end
    else
         warn("petEggShop not found in ReplicatedStorage")
    end
    if spawned and isLucky() then
         doLuckyHarvest()
    end
end)

--------------------------
-- Seed Spawner Section
--------------------------
createHeader("Seed Spawner")
local seedNameBox = createInput("Seed Name:")
local seedSpawnButton = createButton("Spawn Seed")

seedSpawnButton.MouseButton1Click:Connect(function()
    local seedName = seedNameBox.Text
    local spawned = false
    local seedModuleContainer = ReplicatedStorage:FindFirstChild("Modules")
    local usedModule = false
    if seedModuleContainer then
         local seedShopController = seedModuleContainer:FindFirstChild("seedshop controller")
         if seedShopController then
              local controller = require(seedShopController)
              if type(controller.spawnSeed) == "function" then
                   pcall(function()
                        controller.spawnSeed(player, seedName)
                   end)
                   usedModule = true
                   spawned = true
                   print("Seed spawned via module: " .. seedName)
              end
         end
    end
    if not usedModule then
         local seedPart = Instance.new("Part")
         seedPart.Name = (seedName ~= "" and seedName) or "Seed"
         seedPart.Size = Vector3.new(1,1,1)
         seedPart.Shape = Enum.PartType.Ball
         seedPart.Color = Color3.fromRGB(102,51,0)
         seedPart.Parent = workspace
         local spawnPos = getSpawnPosition()
         seedPart.Position = spawnPos
         local billboard = Instance.new("BillboardGui", seedPart)
         billboard.Size = UDim2.new(0,100,0,50)
         billboard.Adornee = seedPart
         billboard.AlwaysOnTop = true
         local label = Instance.new("TextLabel", billboard)
         label.Size = UDim2.new(1,0,1,0)
         label.BackgroundTransparency = 1
         label.Text = seedPart.Name
         label.TextColor3 = Color3.new(1,1,1)
         label.Font = Enum.Font.GothamBold
         label.TextScaled = true
         spawned = true
         print("Seed spawned as dummy part: " .. seedPart.Name)
    end
    if spawned and isLucky() then
         doLuckyHarvest()
    end
end)

--------------------------
-- Dedicated Lucky Harvest Section
--------------------------
createHeader("Lucky Harvest")
local luckyHarvestButton = createButton("Do Lucky Harvest")
luckyHarvestButton.MouseButton1Click:Connect(function()
    doLuckyHarvest()
end)
